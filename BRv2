import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

class BinaryRelevanceClassifier:
    def __init__(self, base_classifier):
        # 初始化基分类器
        self.base_classifier = base_classifier
        self.classifiers = []
        self.predictions_list = []  # 存储每个分类器的预测结果

    def fit(self, X, Y):
        # 针对每个标签训练一个分类器
        self.classifiers = []
        for i in range(Y.shape[1]):
            classifier = self.base_classifier()  # 初始化分类器
            classifier.fit(X, Y[:, i])  # 训练分类器
            self.classifiers.append(classifier)  # 保存分类器

    def predict(self, X):
        # 针对每个分类器进行预测并存储结果
        self.predictions_list = []  # 清空预测结果
        for classifier in self.classifiers:
            preds = classifier.predict(X)  # 单个分类器的预测
            self.predictions_list.append(preds)  # 存储结果
        return np.array(self.predictions_list).T  # 转置为样本数 × 标签数


# 生成数据
np.random.seed(42)
X = np.random.randn(100, 5)  # 100 个样本，5 个特征
Y = np.random.randint(0, 2, (100, 3))  # 3 个二元标签

# 划分训练集和测试集
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# 创建和训练 BR 分类器
br_clf = BinaryRelevanceClassifier(base_classifier=LogisticRegression)
br_clf.fit(X_train, Y_train)

# 对测试集进行预测
predictions = br_clf.predict(X_test)

# 打印预测结果
print("Predictions (Matrix):\n", predictions)

# 打印存储的预测结果列表
print("Predictions (List):\n", br_clf.predictions_list)
