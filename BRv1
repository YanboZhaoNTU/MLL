# 创建一个数据集
import numpy as np
from sklearn.datasets import make_multilabel_classification
from sklearn.model_selection import KFold
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split




class BinaryRelevanceClassifier:
    def __init__(self, base_classifier):
        self.base_classifier = base_classifier
        self.classifiers = []
        self.label_weights = None

    #每个标签建一个分类器
    def fit(self, X, Y):
        self.classifiers = []
        for i in range(Y.shape[1]):
            classifier = self.base_classifier()
            classifier.fit(X, Y[:, i])
            self.classifiers.append(classifier)

    def predict(self, X):
        predictions = []
        for model in self.classifiers:

            predictions.append(model.predict(X))

        return np.array(predictions).T



'''X, Y = make_multilabel_classification(n_samples=500, n_features=20, n_classes=5, random_state=42)

kf = KFold(n_splits=5, shuffle=True, random_state=42)
folds = list(kf.split(X))

# 储存每个基分类器的预测结果和标签
meta_features = []
meta_labels = []

# 训练 5 个 BR分类器
for train_index, test_index in folds:
    X_train, X_test = X[train_index], X[test_index]
    Y_train, Y_test = Y[train_index], Y[test_index]

    #创建和训练BR 分类器
    br_clf = BinaryRelevanceClassifier(base_classifier=LogisticRegression)
    br_clf.fit(X_train, Y_train)
    br_clf.predict(X_test)
    
'''
np.random.seed(42)
X = np.random.randn(100, 5)  # 100 samples, 5 features
Y = np.random.randint(0, 2, (100, 3))  # 3 binary labels

# Split into train and test sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)
br_clf = BinaryRelevanceClassifier(base_classifier=LogisticRegression)
br_clf.fit(X_train, Y_train)
br_clf.predict(X_test)
